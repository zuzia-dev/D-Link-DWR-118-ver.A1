--- a/mt76x02.h
+++ b/mt76x02.h
@@ -22,7 +22,7 @@
 #define MT_MAC_WORK_INTERVAL	(HZ / 10)
 
 #define MT_WATCHDOG_TIME	(HZ / 10)
-#define MT_TX_HANG_TH		10
+#define MT_TX_HANG_TH		30
 
 #define MT_MAX_CHAINS		2
 struct mt76x02_rx_freq_cal {
--- a/mt76x02_mac.c
+++ b/mt76x02_mac.c
@@ -1044,7 +1044,7 @@ static void mt76x02_check_mac_err(struct
 			return;
 		}
 
-		if (dev->beacon_hang_check < 10)
+		if (dev->beacon_hang_check < 30)
 			return;
 
 	} else {
--- a/mt76x02_mmio.c
+++ b/mt76x02_mmio.c
@@ -344,7 +344,7 @@ static bool mt76x02_tx_hang(struct mt76x
 {
 	u32 dma_idx, prev_dma_idx;
 	struct mt76_queue *q;
-	int i;
+	int i, min_tx_hang_check, max_tx_hang_check;
 
 	for (i = 0; i < 4; i++) {
 		q = dev->mphy.q_tx[i];
@@ -358,11 +358,21 @@ static bool mt76x02_tx_hang(struct mt76x
 			continue;
 		}
 
-		if (++dev->tx_hang_check[i] >= MT_TX_HANG_TH)
-			return true;
+		dev->tx_hang_check[i]++;
 	}
 
-	return false;
+	min_tx_hang_check = max_tx_hang_check = dev->tx_hang_check[0];
+	for (i = 1; i < 4; i++) {
+		if (dev->tx_hang_check[i] < min_tx_hang_check) {
+			min_tx_hang_check = dev->tx_hang_check[i];
+		}
+		if (dev->tx_hang_check[i] > max_tx_hang_check) {
+			max_tx_hang_check = dev->tx_hang_check[i];
+		}
+	}
+
+	return min_tx_hang_check >= MT_TX_HANG_TH ||
+		   max_tx_hang_check >= MT_TX_HANG_TH * 8;
 }
 
 static void mt76x02_key_sync(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
